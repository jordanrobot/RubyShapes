==RubyShapes Library Todo File

  Copyright 2009 Matthew D. Jordan
  www.scenic-shop.com
  shared under the GNU GPLv3 - see LICENSE.txt


CONSIDER: revising structure? Separate classes into:
	- solid shapes
	- "theoretical" hollow shapes
	- mechanical tubing shapes
	- hollow structural shapes - already implimented in a handy excel file from AISC
	- nominal pipe size shapes
	- maybe, someday, structural beams (I, C, Z...) - already implimented in a handy excel file from AISC, complicated! woot.


==FIXME

FIXME: Rectangular tubing accuracy is off just a little bit?
    - precision in the millionths seems to be off
	- the trouble starts in the I calculation, steamrolls through S, & R values.
	- tested formula in Mathematica, it corresponds to the ruby output.  the problem seems to lie in which corner radius is specified in the calculations.  Since the corner radius for any given tubing is listed as a range of values, I don't know which ones the Steel Tube Institute used!  Bastards.

FIXME: Bar class returns odd I values to bar.props, steamrolls to S & R properties


==VERIFY

VERIFY: Bar math - only guesstimates


==ADD

ADD: A verify flag for each shape class?  
	- Each shape class will print a "math not verified for ___ shape"
	- Toggling the flag will make this statement go away.
	- Tie into an automated test suite for this?
ADD: Add variable for Iz, Sz, & Rz?
ADD: Add extreme fiber distance variable?
ADD: Create add_hash method using new standardized variables?


==TODO

TODO: Replace Diagnostics Module for a real diagnostic & debugging library.
TODO: create ShapeUtilities::pipe_converter method
	- same as gauge_converter, based on schedule system
TODO: Create testing method/module/mixin to verify math and return a pass/fail
    - Manually enter several accurate results (through range of sizes) w/ corresponding inputs?
    - Check that calculations == accurate results
    - Give a prelim pass/fail based on results
TODO: hand calculate some of the properties and see if the float values fudge accuracy
TODO: Merge Rec_tubing and Square_tubing class? - (using calcs from rec_tubing class)
  

==Reference Data

$gauge_factors = {

#Steel gauge => decimal gauge (inches)
			delta is the difference (in decimal inches) from the gauge listed above
    30=>0.012 
            ∆ 0.001
    29=>0.013 
            ∆ 0.001
    28=>0.014
            ∆ 0.002
    27=>0.016
            ∆ 0.002
    26=>0.018
            ∆ 0.002
    25=>0.020
            ∆ 0.002
    24=>0.022
            ∆ 0.003
    23=>0.025
            ∆ 0.003
    22=>0.028
            ∆ 0.004
    21=>0.032
            ∆ 0.003
    20=>0.035
            ∆ 0.007
<<<<19=>0.042
            ∆ 0.007           
    18=>0.049
            ∆ 0.009
<<<<17=>0.058
            ∆ 0.007
    16=>0.065
            ∆ 0.018
    14=>0.083
            ∆ 0.012
    13=>0.095
            ∆ 0.014
    12=>0.109
            ∆ 0.011
    11=>0.120
            ∆ 0.014
    10=>0.134
            ∆ 0.014
    09=>0.148
            ∆ 0.017
    08=>0.165
            ∆ 0.015
    07=>0.180
            ∆ 0.023
    06=>0.203
            ∆ 0.017
    05=>0.220
            ∆ 0.018
    04=>0.238
            ∆ 0.021
    03=>0.259
            ∆ 0.025
    02=>0.284
            ∆ 0.016
    01=>0.300
            ∆ 0.04
      0=>0.34
            ∆ 0.04
     00=>0.38
            ∆ 0.045
   000=>0.425
            ∆ 0.029
  0000=>0.454 }
